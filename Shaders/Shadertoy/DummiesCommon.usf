#pragma once
// "ShaderToy Tutorial - Ray Marching for Dummies!" 
// by Martijn Steinrucken aka BigWings/CountFrolic - 2018
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
//
// This shader is part of a tutorial on YouTube
// https://youtu.be/PGtv-dBi2wE



#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .01


#define iResolution  View.ViewSizeAndInvSize.xy
#define  iTime  View.GameTime

float GetDist(float3 p) {
	float4 s = float4(0, 1, 6, 1);
    
    float sphereDist =  length(p-s.xyz)-s.w;
    float planeDist = p.y;
    
    float d = min(sphereDist, planeDist);
    return d;
}

float RayMarch(float3 ro, float3 rd) {
	float dO=0.;
    
    for(int i=0; i<MAX_STEPS; i++) {
    	float3 p = ro + rd*dO;
        float dS = GetDist(p);
        dO += dS;
        if(dO>MAX_DIST || dS<SURF_DIST) break;
    }
    
    return dO;
}

float3 GetNormal(float3 p) {
	float d = GetDist(p);
    float2 e = float2(.01, 0);
    
    float3 n = d - float3(
        GetDist(p-e.xyy),
        GetDist(p-e.yxy),
        GetDist(p-e.yyx));
    
    return normalize(n);
}

float GetLight(float3 p) {
    float3 lightPos = float3(0, 5, 6);
    lightPos.xz += float2(sin(iTime), cos(iTime))*2.;
    float3 l = normalize(lightPos-p);
    float3 n = GetNormal(p);
    
    float dif = clamp(dot(n, l), 0., 1.);
    float d = RayMarch(p+n*SURF_DIST*2., l);
    if(d<length(lightPos-p)) dif *= .1;
    
    return dif;
}

float4 mainImage(in float2 fragCoord )
{
    float2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;

    float3 col = 0;
    
    float3 ro = float3(0, 1, 0);
    float3 rd = normalize(float3(uv.x, -uv.y, 1));

    float d = RayMarch(ro, rd);
    float3 p = ro + rd * d;
    float dif = GetLight(p);
    col = float3(dif,dif,dif);
    float tempC = .4545;
    col = pow(col, float3(tempC,tempC,tempC));	// gamma correction
    
    return float4(col,1.0);
}