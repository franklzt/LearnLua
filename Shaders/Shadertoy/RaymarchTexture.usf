#pragma once
// "RayMarching starting point" 
// by Martijn Steinrucken aka The Art of Code/BigWings - 2020
// The MIT License
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// Email: countfrolic@gmail.com
// Twitter: @The_ArtOfCode
// YouTube: youtube.com/TheArtOfCodeIsCool
// Facebook: https://www.facebook.com/groups/theartofcode/
//
// You can use this shader as a template for ray marching shaders

#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .001

#define TAU 6.283185
#define PI 3.141592
#define S smoothstep
#define T iTime


#define sphereRadus 1.5

float4 GetTextureRGB(float2 uv,Texture2D text, SamplerState ss)
{
    return Texture2DSampleBias(
    text,ss,
    MaterialFloat2(uv.x,uv.y),View.MaterialTextureMipBias);
}





float2x2 Rot(float a) {
    float s=sin(a), c=cos(a);
    return float2x2(c, -s, s, c);
}

float sdBox(float3 p, float3 s) {
    p = abs(p)-s;
	return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);
}


float GetDist(float3 p) {
    //float d = sdBox(p, float3(1,1,1)); // this is the box
    float d = length(p) -sphereRadus;
    return d;
}

float3 Transform(float3 p)
{
    //p.xy = mul(Rot(View.GameTime * 0.4),p.xy);
    //p.xz = mul(Rot(View.GameTime * 0.2),p.xz);
    return p;
}

float RayMarch(float3 ro, float3 rd) {
	float dO=0.;
    
    for(int i=0; i<MAX_STEPS; i++) {
    	float3 p = ro + rd*dO;
        p = Transform(p);
        float dS = GetDist(p);
        dO += dS;
        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;
    }
    
    return dO;
}

float3 GetNormal(float3 p) {
    float2 e = float2(.001, 0);
    float3 n = GetDist(p) - 
        float3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));
    
    return normalize(n);
}

float3 GetRayDir(float2 uv, float3 p, float3 l, float z) {
    float3 
        f = normalize(l-p),
        r = normalize(cross(float3(0,1,0), f)),
        u = cross(f,r),
        c = f*z,
        i = c + uv.x*r + uv.y*u;
    return normalize(i);
}

float4 smainImage(FMaterialPixelParameters Parameters,float2 fragCoord,float4 iMouse)
{

    float2 iResolution = View.ViewSizeAndInvSize.xy;
    float iTime = View.GameTime;

    float2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;
    
	float2 m = iMouse.xy/iResolution.xy;

    float3 ro = float3(0, 3, -3);
    ro.yz = mul(Rot(-m.y*PI+1.),ro.yz);
    ro.xz = mul(Rot(-m.x*TAU),ro.xz);
    
    float3 rd = GetRayDir(uv, ro, float3(0,0.,0), 1.);
    float3 col = 0;
   
    float d = RayMarch(ro, rd);

    if(d<MAX_DIST) {
        float3 p = ro + rd * d;
        p = Transform(p);
        float3 n = GetNormal(p);
        float3 r = reflect(rd, n);

        float dif = dot(n, normalize(float3(1,2,3)))*.5+.5;
        col = float3(dif,dif,dif);
        //float2 uv_screen = fragCoord / iResolution.xy;
        float2 uv_screen = p.xy * 0.5 + 0.5;
      
        n = abs(n);

        // tripple mapping 
        float tempPower = 2;
        n *= pow(n,float3(tempPower,tempPower,tempPower)); 
        n /= n.x + n.y + n.z;

        float3 colXZ = GetTextureRGB(p.xz * 0.5 + 0.5,Material.Texture2D_0,Material.Texture2D_0Sampler).rgb;
        float3 colYZ = GetTextureRGB(p.yz * 0.5 + 0.5,Material.Texture2D_0,Material.Texture2D_0Sampler).rgb;
        float3 colXY = GetTextureRGB(p.xy * 0.5 + 0.5,Material.Texture2D_0,Material.Texture2D_0Sampler).rgb;

        col = n.z * colXY + n.y * colXZ + n.x * colYZ;
        uv = float2(atan2(p.x,p.z) / 6.2832,p.y/(sphereRadus * 2)) + 0.5;
        uv.x = frac(uv.x - View.GameTime * 0.1);
        float4 cats = GetTextureRGB(uv,Material.Texture2D_1,Material.Texture2D_1Sampler);
        float a = smoothstep(0.6,0.5,abs(p.y));
        col = lerp(col,cats.rgb,a);
    }
    
    float tempCol = .4545;

    

    //col = GetTextureRGB(uv_screen * 2.0,Material.Texture2D_0,Material.Texture2D_0Sampler); // multi value big than 1 to split the screen
    //col *= 0;
    //col.rg = uv_screen;
    //col.g = 1-uv_screen.y; // flip the y value to the same as glsl
    col = pow(col, float3(tempCol,tempCol,tempCol));	// gamma correction
    
    return float4(col,1.0);
}