#pragma once

// The MIT License
// Copyright Â© 2014 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



// Ray-Box intersection, by convertig the ray to the local space of the box.
//
// If this was used to raytace many equally oriented boxes (say you are traversing
// a BVH), then the transformations in line 34 and 35 could be skipped, as well as
// the normal computation in line 50. One over the ray direction is usually accessible
// as well in raytracers, so the division would go away in real world applications.


// List of ray-surface intersectors at https://www.shadertoy.com/playlist/l3dXRf
//
// and https://iquilezles.org/articles/intersectors


// Other Box functions (https://iquilezles.org/articles/boxfunctions)
//
// Intersection:     https://www.shadertoy.com/view/ld23DV
// Occlusion:        https://www.shadertoy.com/view/4sSXDV
// Occlusion:        https://www.shadertoy.com/view/4djXDy
// Density:          https://www.shadertoy.com/view/Ml3GR8
// Fake soft shadow: https://www.shadertoy.com/view/WslGz4
// Gradient:         https://www.shadertoy.com/view/wlcXD2


float4x4 inverse(float4x4 m) {
    float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
    float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
    float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
    float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

    float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
    float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
    float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
    float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

    float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    float idet = 1.0f / det;

    float4x4 ret;

    ret[0][0] = t11 * idet;
    ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
    ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
    ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

    ret[1][0] = t12 * idet;
    ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
    ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
    ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

    ret[2][0] = t13 * idet;
    ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
    ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
    ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

    ret[3][0] = t14 * idet;
    ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
    ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
    ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

    return ret;
}


// https://iquilezles.org/articles/boxfunctions
float4 iBox( in float3 ro, in float3 rd, in float4x4 txx, in float4x4 txi, in float3 rad ) 
{
    // convert from ray to box space
	float3 rdd = (mul(txx,float4(rd.x,rd.y,rd.z,0.0))).xyz;
	float3 roo = (mul(txx,float4(ro.x,ro.y,ro.z,1.0))).xyz;

	// ray-box intersection in box space
    float3 m = 1.0/rdd;
    float3 n = m*roo;
    float3 k = abs(m)*rad;
    float3 t1 = -n - k; float tN = max(max(t1.x,t1.y),t1.z);
    float3 t2 = -n + k; float tF = min(min(t2.x,t2.y),t2.z);
	
    // no intersection
	if( tN>tF || tF<0.0 ) return float4(-1.0,-1.0,-1.0,1.0);

    #if 1
    // this works as long as the ray origin is not inside the box
    float4 res = float4(tN, step(tN,t1) );
    #else
    // use this instead if your rays origin can be inside the box
    float4 res = (tN>0.0) ? float4( tN, step(float3(tN),t1)) :
                          float4( tF, step(t2,float3(tF)));
    #endif
    
    // add sign to normal and convert to ray space
    float3 signValue = -sign(rdd)*res.yzw;
	res.yzw = (mul(txi , float4(signValue.x,signValue.y,signValue.z,0.0))).xyz;

	return res;
}


// https://iquilezles.org/articles/boxfunctions
float sBox( in float3 ro, in float3 rd, in float4x4 txx, in float3 rad ) 
{
	float3 rdd = (mul(txx,float4(rd.x,rd.y,rd.z,0.0))).xyz;
	float3 roo = (mul(txx,float4(ro.x,ro.y,ro.z,1.0))).xyz;

    float3 m = 1.0/rdd;
    float3 n = m*roo;
    float3 k = abs(m)*rad;
	
    float3 t1 = -n - k;
    float3 t2 = -n + k;

	float tN = max( max( t1.x, t1.y ), t1.z );
	float tF = min( min( t2.x, t2.y ), t2.z );
	if( tN > tF || tF < 0.0) return -1.0;
	
	return tN;
}


//-----------------------------------------------------------------------------------------

float4x4 rotationAxisAngle( float3 v, float angle )
{
    float s = sin( angle );
    float c = cos( angle );
    float ic = 1.0 - c;

    return float4x4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,
                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,
                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,
			     0.0,                0.0,                0.0,                1.0 );
}

float4x4 translate( float x, float y, float z )
{
    return float4x4( 1.0, 0.0, 0.0, 0.0,
				 0.0, 1.0, 0.0, 0.0,
				 0.0, 0.0, 1.0, 0.0,
				 x,   y,   z,   1.0 );
}
/*
float4x4 inverse( in float4x4 m )
{
	return float4x4(
        m[0][0], m[1][0], m[2][0], 0.0,
        m[0][1], m[1][1], m[2][1], 0.0,
        m[0][2], m[1][2], m[2][2], 0.0,
        -dot(m[0].xyz,m[3].xyz),
        -dot(m[1].xyz,m[3].xyz),
        -dot(m[2].xyz,m[3].xyz),
        1.0 );
}*/




float4 mainImage(float2 fragCoord,float4 iMouse)
{

    float2 iResolution = View.ViewSizeAndInvSize.xy;
    float iTime = View.GameTime;

	float2 p = (2.0*fragCoord-iResolution.xy) / iResolution.y;

     // camera movement	
	float an = 0.4*iTime;
	float3 ro = float3( 2.5*cos(an), 1.0, 2.5*sin(an) );
    float3 ta = float3( 0.0, 0.8, 0.0 );
    // camera matrix
    float3 ww = normalize( ta - ro );
    float3 uu = normalize( cross(ww,float3(0.0,1.0,0.0) ) );
    float3 vv = normalize( cross(uu,ww));
	// create view ray
	float3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );

    // rotate and translate box	
	float4x4 rot = rotationAxisAngle( normalize(float3(1.0,1.0,0.0)), iTime );
	float4x4 tra = translate( 0.0, 1.0, 0.0 );
	float4x4 txi = tra * rot; 
	float4x4 txx = inverse( txi );

    // raytrace
	float tmin = 10000.0;
	float3  nor = float3(0.0,0.0,0.0);
	float3  pos = float3(0.0,0.0,0.0);
	
	// raytrace-plane
	float oid = 0.0;
	float h = (0.0-ro.y)/rd.y;
	if( h>0.0 ) 
	{ 
		tmin = h; 
		nor = float3(0.0,1.0,0.0); 
		oid = 1.0;
	}

	// raytrace box
	float3 box = float3(0.4,0.6,0.8) ;
	float4 res = iBox( ro, rd, txx, txi, box);
	if( res.x>0.0 && res.x<tmin )
	{
		tmin = res.x; 
		nor = res.yzw;
		oid = 2.0;
	}

    // shading/lighting	
	float3 col = float3(0.6,0.75,0.85) - 0.97*rd.y;
    
	if( tmin<100.0 )
	{
		pos = ro + tmin*rd;
		float occ = 1.0;

        // material
		float3  mate = float3(1.0,1.0,1.0);
		
		
        // lighting
        float3  lig = normalize(float3(0.8,0.4,-0.6));
        float dif = clamp( dot(nor,lig), 0.0, 1.0 );
        float3  hal = normalize(lig-rd);
        float sha = step( iBox( pos+0.001*nor, lig, txx, txi, box ).x, 0.0 );
        float amb = 0.6 + 0.4*nor.y;
        float bou = clamp(0.3-0.7*nor.y,0.0,1.0);
        float spe = clamp(dot(nor,hal),0.0,1.0);
        col  = 4.0*float3(1.00,0.80,0.60)*dif*sha;
        col += 2.0*float3(0.20,0.30,0.40)*amb;
        col += 2.0*float3(0.30,0.20,0.10)*bou;
        //col *= mate;            
        col += 0.3*pow(spe,8.0)*dif*sha*(0.04+0.96*pow(clamp(dot(lig,hal),0.0,1.0),5.0));
        col = lerp( col, float3(0.6,0.7,0.8), 1.0-exp(-0.001*tmin*tmin) );           
	}
	
    // vignetting        
    col *= 1.0 - 0.1*dot(p,p);

    // gamma
    col = pow( col, float3(0.45,0.45,0.45) );
    
	// grading
    col = clamp(col,0.0,1.0);
    col = col*col*(3.0-2.0*col);

	return float4( col, 1.0 );
}