#pragma once
// "Texturing SDFs" 
// by Martijn Steinrucken aka The Art of Code/BigWings - 2020
// The MIT License
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// Email: countfrolic@gmail.com
// Twitter: @The_ArtOfCode
// YouTube: youtube.com/TheArtOfCodeIsCool
// Facebook: https://www.facebook.com/groups/theartofcode/
//
// This shader is the end result of a tutorial on YouTube you can
// find here: https://youtu.be/VaYyPTw0V84

#define MAX_STEPS 100
#define MAX_DIST 100.
#define SURF_DIST .001

#define S smoothstep
#define T iTime


float4 GetTextureRGB(float2 uv,Texture2D text, SamplerState ss)
{
    return Texture2DSampleBias(
    text,ss,
    MaterialFloat2(uv.x,uv.y),View.MaterialTextureMipBias);
}


float2x2 Rot(float a) {
    float s=sin(a), c=cos(a);
    return float2x2(c, -s, s, c);
}

float Hash21(float2 p) {
    p = frac(p*float2(123.34,233.53));
    p += dot(p, p+23.234);
    return frac(p.x*p.y);
}

float sdBox(float3 p, float3 s) {
    p = abs(p)-s;
	return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);
}

float GetDist(float3 p) {
    float d = sdBox(p, float3(1,1,1));
    
    d = length(p)-1.5;
    
    float2 uv = float2(atan2(p.x, p.z)/6.2832, p.y/3.)+.5;
    float disp = GetTextureRGB(p.xz * 0.5 + 0.5,Material.Texture2D_2,Material.Texture2D_2Sampler).r;//texture(iChannel2, uv).r;
    
    disp *= smoothstep(1.4, 1., abs(p.y));
    d -= disp*.3;
    
    return d*.7;
}

float3 Transform(float3 p) {
     p.xy = mul(Rot(View.GameTime*.4),p.xy);
     p.xz = mul(Rot(View.GameTime*.2),p.xz);
     
     return p;
}

float RayMarch(float3 ro, float3 rd) {
	float dO=0.;
    
    for(int i=0; i<MAX_STEPS; i++) {
    	float3 p = Transform(ro + rd*dO);
       
        float dS = GetDist(p);
        dO += dS;
        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;
    }
    
    return dO;
}

float3 GetNormal(float3 p) {
	float d = GetDist(p);
    float2 e = float2(.001, 0);
    
    float3 n = d - float3(
        GetDist(p-e.xyy),
        GetDist(p-e.yxy),
        GetDist(p-e.yyx));
    
    return normalize(n);
}

float3 GetRayDir(float2 uv, float3 p, float3 l, float z) {
    float3 f = normalize(l-p),
        r = normalize(cross(float3(0,1,0), f)),
        u = cross(f,r),
        c = f*z,
        i = c + uv.x*r + uv.y*u,
        d = normalize(i);
    return d;
}



float4 mainImage(in float2 fragCoord,float4 iMouse)
{
    float2 iResolution = View.ViewSizeAndInvSize.xy;
    float iTime = View.GameTime;

    float2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;
	float2 m = iMouse.xy/iResolution.xy;
    
    float3 col = 0;
    
    float3 ro = float3(0, 3, -3);
    ro.yz = mul(Rot(-m.y*3.14+1.),ro.yz);
    ro.xz = mul(Rot(-m.x*6.2831),ro.xz);
    
    float3 rd = GetRayDir(uv, ro, float3(0,0,0), 1.);

    float d = RayMarch(ro, rd);
    
    if(d<MAX_DIST) {
    	float3 p = Transform(ro + rd * d);
        
        
    	float3 n = GetNormal(p);
        
    	float dif = dot(n, normalize(float3(1,2,3)))*.5+.5;
    	col += dif*dif;
        
        float3 colXZ = GetTextureRGB(p.xz*.5+.5,Material.Texture2D_0,Material.Texture2D_0Sampler).rgb;//texture(iChannel0, p.xz*.5+.5).rgb;
        float3 colYZ = GetTextureRGB(p.yz*.5+.5,Material.Texture2D_0,Material.Texture2D_0Sampler).rgb;//texture(iChannel0, p.yz*.5+.5).rgb;
        float3 colXY = GetTextureRGB(p.xy*.5+.5,Material.Texture2D_0,Material.Texture2D_0Sampler).rgb;//texture(iChannel0, p.xy*.5+.5).rgb;
        
        n = abs(n);
        
        n *= pow(n, float3(2,2,2));
        n /= n.x+n.y+n.z;
        
        col = colYZ*n.x + colXZ*n.y + colXY*n.z;
        
        uv = float2(atan2(p.x, p.y)/6.2832, 2.*p.y/3.)+.5;
        
        uv.y = frac(uv.y-iTime*.1);
        float4 cats = GetTextureRGB(p.yz*.5+.5,Material.Texture2D_1,Material.Texture2D_1Sampler);//texture(iChannel1, uv);
        
        float a = smoothstep(.6, .5, abs(p.y));
        col = col + cats.rgb;//lerp(col, cats.rgb, 0.5);
        
        col *= dif;
    }
    
  
   // col *= 0.;
   // col.rg = uv;
   // col = pow(col, float3(.4545));	// gamma correction
    
    return float4(col,1.0);
}