// The MIT License
// Copyright © 2020 Inigo Quilez
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// Attempting to compute the SDF of a bilinear 
// patch (p0,p1,p2,p3), by searching for the roots of
// a quintic polynomial in parametric space. It works,
// but it's unstable. So, not successfull. I might try
// to find an implicit form instead, another time. But
// for now, this is the derivation:
//
// q(u,v) = p0 + u(p1-p0) + v(p3-p0) + uv(p2-p3-p1+p0)
//
// D²(uv) = |p-q(u,v)|² = |D+uA+vB+uvC|²
//
// ∇D²(uv) = 2(uAA + uv²CC + v(AB+CD) + 2uvAC +  v²*BC + AD,
//             vBB + u²vCC + u(AB+CD) +  u²AC + 2uv*BC + BD)
//
// ∇D²(uv) = 0 gives two equations
//
// Isolating u in one and replacing in the other produces
// an equation of degree 9, which we cannot solve in 
// closed form. So, we need another method. I implemented
// two method to find the roots:
// 
// Method 0 is to isolate u and v anywways, and iterate:
//
//   v = -(u²AC + u(AB+CD) + BD) / |B+uC|²
//   u = -(v²BC + v(AB+CD) + AD) / |A+vC|²
//
// Method 1 is using the Newton method: https://en.wikipedia.org/wiki/Newton%27s_method_in_optimization
//
//   Gradient G=2*( uAA + uv²CC + v(AB+CD) + 2uvAC +  v²BC + AD,
//                  vBB + u²vCC + u(AB+CD) +  u²AC + 2uvBC + BD)
//
//   Hessian H = 2*( AA + v²CC + 2vAC, 
//                   2uvCC + ABCD + 2uAC + 2vBC,
//                   2uvCC + ABCD + 2uAC + 2vBC,
//                   BB + u²CC + 2uBC )
//
//   uv = uv - inverse(H(uv))*G(uv)
//
// I implemented two ways to initialize the root finders:
//
// Initial 0 just starts at the center of the patch
// Initial 1 computes 15 geodesics and picks the uv's of the
//           closest point in any geodesic
//
// The cube is from from fizzer's bilinear-patch
// intersection shader: https://www.shadertoy.com/view/3dXGWs


// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl
//
// and https://iquilezles.org/articles/distfunctions

#pragma once

#define iResolution  View.ViewSizeAndInvSize.xy
#define  iTime  View.GameTime

// 0: hack
// 1: newtown
#define METHOD 0

// 0: middle      ---> fast but bad
// 1: line scans  ---> much better, but slower
#define INITIAL 1


// enable SHADOWS and floor plane if you have a fast machine
#define SHADOWS


//-------------------------------------------------------


float4 GetTextureRGB(float2 uv,Texture2D text, SamplerState ss)
{
    return Texture2DSampleBias(
    text,ss,
    MaterialFloat2(uv.x,uv.y),View.MaterialTextureMipBias);
}


float dot2( in float3 v ) { return dot(v,v); }

float3 sdBilinearPatch( in float3 p,
                      in float3 p0, in float3 p1, in float3 p2, in float3 p3 )
{    
    float3 A = p1-p0;
    float3 B = p3-p0;
    float3 C = p2-p3-p1+p0;
    float3 D = p0-p;

    // initial guess

#if INITIAL==0
    float2 uv = float2(0.5,0.5);
#endif
#if INITIAL==1
    float2 uv = float2(0.0,0.0);
    float d = dot2(p-p0);
    for( int i=0; i<16; i++ )
    {
        float u = float(i)/15.0;
        float3 ba = lerp( B,p2-p1,u);
        float3 pa = lerp(-D,p -p1,u);
		float v = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
		float t = dot2(pa-ba*v);
        if( t<d ) { d=t; uv=float2(u,v); }
    }
    //return float3(sqrt(d),uv);
#endif
    
    // find roots
    
#if METHOD==0
    float2  k2 = float2(dot(A,C),dot(B,C));
    float2  k0 = float2(dot(B,D),dot(A,D));
    float k1 = dot(A,B)+dot(C,D);
    
    for( i=0; i<16; i++ )
    {
      uv.yx = clamp( -(uv*uv*k2 + uv*k1 + k0 ) /
                     float2( dot2(B+uv.x*C), dot2(A+uv.y*C) ),
                     0.0, 1.0);
    }
    float3 pq = D+uv.x*A+uv.y*B+uv.x*uv.y*C;
    float3 nor = cross(A+uv.y*C,B+uv.x*C); // normal
	return float3( length(pq), uv );
#endif
    
#if METHOD==1
    float AA = dot(A,A);
    float BB = dot(B,B);
    float CC = dot(C,C);
    float BC = dot(B,C);
    float AC = dot(A,C);
    float ABCD = dot(A,B)+dot(C,D);
    float AD = dot(A,D);
    float BD = dot(B,D);
    for( int i=0; i<6; i++ )
    {
        float2 gra = float2(
         uv.x*AA + uv.x*uv.y*uv.y*CC + uv.y*ABCD + 2.0*uv.x*uv.y*AC +     uv.y*uv.y*BC + AD,
         uv.y*BB + uv.x*uv.x*uv.y*CC + uv.x*ABCD +     uv.x*uv.x*AC + 2.0*uv.x*uv.y*BC + BD);

        float k1 = 2.0*uv.x*uv.y*CC + ABCD + 2.0*uv.x*AC + 2.0*uv.y*BC;
        mat2x2 hes = mat2x2(
         AA + uv.y*uv.y*CC + 2.0*uv.y*AC,
         k1, k1, 
         BB + uv.x*uv.x*CC + 2.0*uv.x*BC );
        
        uv -= inverse(hes)*gra;
        
        uv = clamp(uv,0.0,1.0);
    }
    float3 nor = cross(A+uv.y*C,B+uv.x*C); // normal
	return float3( length(D+uv.x*A+uv.y*B+uv.x*uv.y*C), uv );
#endif    
}

//-------------------------------------------------------

float3 gVerts[8]; // Deformed cube geometry

const float kRoundness = 0.03;

// sdf
float3 map( in float3 p )
{
    float3 res = float3(length(p-gVerts[0]),0.0,0.0);

    
    //   2---3
    //  /   /|
    // 6---7 |
    // |   | 1
    // 4---5/
    
    float3 tmp;
    tmp = sdBilinearPatch(p, gVerts[0], gVerts[2], gVerts[3], gVerts[1]); if( tmp.x<res.x ) res = tmp;
    tmp = sdBilinearPatch(p, gVerts[7], gVerts[6], gVerts[4], gVerts[5]); if( tmp.x<res.x ) res = tmp;
    tmp = sdBilinearPatch(p, gVerts[0], gVerts[1], gVerts[5], gVerts[4]); if( tmp.x<res.x ) res = tmp;
    tmp = sdBilinearPatch(p, gVerts[2], gVerts[6], gVerts[7], gVerts[3]); if( tmp.x<res.x ) res = tmp;
    tmp = sdBilinearPatch(p, gVerts[0], gVerts[4], gVerts[6], gVerts[2]); if( tmp.x<res.x ) res = tmp;
    tmp = sdBilinearPatch(p, gVerts[1], gVerts[3], gVerts[7], gVerts[5]); if( tmp.x<res.x ) res = tmp;
    
    res.x -= kRoundness; // round it a bit
    return res;
}

// https://iquilezles.org/articles/intersectors
float2 iSphere( in float3 ro, in float3 rd, in float4 sph )
{
	float3 oc = ro - sph.xyz;
	float b = dot( oc, rd );
	float c = dot( oc, oc ) - sph.w*sph.w;
	float h = b*b - c;
	if( h<0.0 ) return float2(-1.0,-1.0);
    h = sqrt(h);
	return float2(-b-h,-b+h);
}

int raycast( in float3 ro, in float3 rd, out float3 oUVT)
{
  
    int   obj = 0;
    
    float tmin = 2.0;
    float tmax = 5.0;
    float2  uv = 0.0;

    // floor
    #ifdef SHADOWS
    float tf = (2.0 - ro.y) / rd.y;
    if( tf>0.0 ) { tmax=min(tmax,tf); obj=1; oUVT = float3(0.0,0.0,tf); }
    #endif

    // bounding sphere
    float2 bs = 0.0;// iSphere(ro,rd,float4(0.0,0.0,0.0,sqrt(3.0)+kRoundness));
    if( bs.y>0.0 )
    {
        tmin = max(tmin,bs.x); // clip search space
        tmax = min(tmax,bs.y); // clip search space
        
        // rayamarch cube
        float t = tmin;
        for( int i=0; i<256; i++ )	
        {
            float3 pos = ro + t*rd;
            float3 duv = map(pos);
            uv = duv.yz;
            if( (duv.x)<0.001 ) break;
            t += duv.x;
            if( t>tmax ) break;        
        }

        if( t<tmax )
        {
            obj = 2;
            oUVT = float3(uv,t);
        }
    }

    return obj;
}


// https://iquilezles.org/articles/rmshadows
float calcSoftshadow( in float3 ro, in float3 rd )
{
    float tmin = 0.001;
    float tmax = 8.0;

    float res = 1.0;
    
    // bounding sphere
    float2 bs = iSphere(ro,rd,float4(0.0,0.0,0.0,sqrt(3.0)+kRoundness+0.2));
    if( bs.y>0.0 )
    {
        tmin = max(tmin,bs.x); // clip search space
        tmax = min(tmax,bs.y); // clip search space
        
        float t = tmin;
        for( int i=0; i<64; i++ )
        {
            float h = map( ro + rd*t ).x;
            float s = clamp(8.0*h/t,0.0,1.0);
            res = min( res, s*s*(3.0-2.0*s) );
            t += clamp( h, 0.02, 0.5 );
            if( res<0.005 || t>tmax ) break;
        }
    }
    return clamp( res, 0.0, 1.0 );
}


// https://iquilezles.org/articles/normalsSDF
float3 calcNormal( in float3 pos )
{
#if 0
    float2 e = float2(1.0,-1.0)*0.5773*0.0005;
    return normalize( e.xyy*map( pos + e.xyy ).x + 
					  e.yyx*map( pos + e.yyx ).x + 
					  e.yxy*map( pos + e.yxy ).x + 
					  e.xxx*map( pos + e.xxx ).x );
#else
    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times
    float3 n = 0.0;
    for( int i=min(0,30); i<4; i++ )
    {
        float3 e = 0.5773*(2.0*float3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);
        n += e*map(pos+0.001*e).x;
    }
    return normalize(n);
#endif    
}

float2 rot( float2 p, float an )
{
    return mul(float2x2(cos(an), sin(an), -sin(an), cos(an)) , p);
}

const float N = 32.0;
float gridTexture( in float2 p )
{
	// filter kernel
    float2 w = fwidth(p) + 0.01;

	// analytic (box) filtering
    float2 a = p + 0.5*w;                        
    float2 b = p - 0.5*w;           
    float2 i = (floor(a)+min(frac(a)*N,1.0)-
              floor(b)-min(frac(b)*N,1.0))/(N*w);
    //pattern
    return (1.0-i.x)*(1.0-i.y);
}

float4 mainImage(float2 fragCoord, float4 iMouse)
{
    float2 uv = (2.0*fragCoord-iResolution.xy) / iResolution.y;

    float3 ro = float3(0.0, 0.0, 4.0);
    float3 rd = normalize(float3(uv, -1.6));

    // vertex deformation, from https://www.shadertoy.com/view/3dXGWs
    float time = 1.0;
    float amp = smoothstep(0.0,0.2,0.5-0.5*cos(6.2831*time/15.0));
    for(int i = 0; i<8; i++)
    {
        float3 p = float3((int3(i,i,i)>>int3(0,1,2))&1)*2.0-1.0;

        //p.xz = rot(p.xz,  amp*cos(time*3.0*6.2831/15.0+p.y+0.0)/2.0 );
        //p.yz = rot(p.yz, -amp*cos(time*1.0*6.2831/15.0+p.x+2.0)/1.0 );
        //p.xz = rot(p.xz,  4.0 + time*1.0*6.2831/15.0 );
        
        gVerts[i] = p;
    }

    // render
    
    float3 col = 0.0;

    float3 uvt;
    int obj = raycast(ro, rd, uvt);
    if( obj>0 )
    {
        float t = uvt.z;
        float3 pos = ro + t*rd;
    	float3 nor = float3(0.0,1.0,0.0);
        float2 uv = pos.xz*0.25;
        #ifdef SHADOWS
    	if( obj==2 )
        #endif
        {
            uv = uvt.xy;
        	nor = calcNormal(pos);
        }

        // shade and illuminate (oldscool way)
        float3 tex = GetTextureRGB(uv,Material.Texture2D_0,Material.Texture2D_0Sampler).rgb;//texture(iChannel0,uv).xyz;
    	//tex *= gridTexture(4.0*uv);
        
    	float3  lig = normalize(float3(6, 5,-1));
        float3  hal = normalize(lig-rd);
        float dif = clamp(dot(nor,lig),0.0,1.0);
        float spe = pow(max(0.0, dot(nor,hal)), 16.0);
        float amb = 0.5+0.5*nor.y;
        float bou = 0.5+0.5-nor.y;

        #ifdef SHADOWS
        if( dif>0.0 )
        {
    		//dif *= calcSoftshadow(pos+0.01*nor, lig);
        }
        #endif

        spe *= 0.04 + 0.96*pow(clamp(1.0-dot(lig,hal),0.0,1.0),5.0);
        col = tex*(4.0*dif*float3(1.00,0.70,0.70) + 
                   1.0*amb*float3(0.15,0.10,0.05)+
                   1.0*bou*float3(0.20,0.07,0.02)) + 
              tex.x*spe*dif*20.0;
        col *= exp2(-t*0.1);
    }
    
    // gain
    col = col*2.0/(1.0+col);
	// gamma
    col = pow(col,float3(0.4545,0.4545,0.4545));
    
    // grade
    col.z += 0.02;

    return float4( col, 1.0 );
}